{"relevantArticles":[{"articleTitle":"Promise的实现","articleAbstractText":"Promise的实现  github链接: https://github.com/Jin821551407/MyPromise.git  1.构造器的实现 一个 Promise 是一个代理，它代表一个在创建 promise 时不一定已知的值。它允许你将处理程序与异步操作的最终成功值或失败原因关联起来。这使得异步方法可以像同步方法一样返回值：异步方法不会立即返回最终值，而是返回一个 promise ，以便在将来的某个时间点提供该值。 一个 Promise 必然处于以下几种状态之一：  待定（pending） ：初始状态，既没有被兑现，也没有被拒绝。 已兑现（fulfilled） ：意味着操作成功完成。 已拒绝（rejected） ：意味着操作失败。  class MyPromise { PENDING = 'pending' FULLFILLED = 'fullfilled' REJECTED = 'rejected' constructor(excutor) { this._state = this.PENDING this._result = undefined const reso....","articleStatus":0,"articlePermalink":"/articles/2024/12/29/1735480010074.html","articleImg1URL":"https://b3logfile.com/bing/20240514.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"手写call,apply,bind","articleAbstractText":"手写call,apply,bind myCall  1.call中的this指向是指向调用call的那个函数,直接调用this,这个函数中的this会指向全局,将this绑定到ctx对象中调用,这个函数中的this则会指向传入的ctx 2.将call中的this绑定到ctx中时,使用Symbol保证此属性值唯一,使用defineProperty保证此属性不可被遍历 3.调用完成后将此属性删除,并将返回值返回 4.ctx为null或者undefined则ctx赋值为全局对象,否则全转换为Object类型 5.apply 和 call 的区别只是传参方式不同,其余都一致  Function.prototype.myCall = function (ctx, ...args) { if (ctx === null || ctx === undefined) { ctx = globalThis } else { ctx = Object(ctx) } const key = Symbol('temp') Object.defineProperty(ctx, key, { enumerable....","articleStatus":0,"articlePermalink":"/articles/2024/09/05/1725525546049.html","articleImg1URL":"https://b3logfile.com/bing/20181220.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"关于vue2中的computed计算属性","articleAbstractText":"面试题：computed和methods有什么区别  标准而浅显的回答   在使用时，computed当做属性使用，而methods则当做方法调用 computed可以具有getter和setter，因此可以赋值，而methods不行 computed无法接收多个参数，而methods可以 computed具有缓存，而methods没有   更接近底层原理的回答  vue对methods的处理比较简单，只需要遍历methods配置中的每个属性，将其对应的函数使用bind绑定当前组件实例后复制其引用到组件实例中即可 而vue对computed的处理会稍微复杂一些。 当组件实例触发生命周期函数beforeCreate后，它会做一系列事情，其中就包括对computed的处理 它会遍历computed配置中的所有属性，为每一个属性创建一个Watcher对象，并传入一个函数，该函数的本质其实就是computed配置中的getter，这样一来，getter运行过程中就会收集依赖 但是和渲染函数不同，为计算属性创建的Watcher不会立即执行，因为要考虑到该计算属性是否会被渲染函数使用，如果没有使用....","articleStatus":0,"articlePermalink":"/articles/2024/06/27/1719457607161.html","articleImg1URL":"https://b3logfile.com/bing/20201108.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}